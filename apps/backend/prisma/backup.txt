model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  shelves   Shelf[]   @relation("UserShelves")
  invites   ShelfInvite[]
}

model Shelf {
  id          Int           @id @default(autoincrement())
  name        String
  ownerId     Int
  owner       User          @relation("UserShelves", fields: [ownerId], references: [id])
  books       ShelfBook[]
  privacy     Privacy        @default(PRIVATE) // Privacy settings
  invites     ShelfInvite[]
}

model ShelfBook {
  id          Int           @id @default(autoincrement())
  shelfId     Int
  bookId      Int
  categoryId  Int
  metadata    Json?         // Metadata for book-specific details
  shelf       Shelf         @relation(fields: [shelfId], references: [id])
  book        Book          @relation(fields: [bookId], references: [id])
  category    Category       @relation(fields: [categoryId], references: [id])
}

model ShelfInvite {
  id          Int           @id @default(autoincrement())
  shelfId     Int
  userId      Int
  permission  Permission    // Enum: READ or MODIFY
  shelf       Shelf         @relation(fields: [shelfId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
}

model Book {
  id          Int           @id @default(autoincrement())
  title       String
  author      String
  isbn        String?       @unique
  shelfBooks  ShelfBook[]
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  books       ShelfBook[]
}

enum Privacy {
  PRIVATE
  PUBLIC
  INVITE_ONLY
}

enum Permission {
  READ
  MODIFY
}


CREATE OR REPLACE FUNCTION validate_metadata() RETURNS TRIGGER AS $$
BEGIN
  IF NEW.categoryId = (SELECT id FROM Category WHERE name = 'to_be_read') THEN
    IF NEW.metadata IS NOT NULL THEN
      RAISE EXCEPTION 'Books in "to_be_read" category cannot have metadata';
    END IF;
  ELSIF NEW.categoryId = (SELECT id FROM Category WHERE name = 'in_progress') THEN
    IF NEW.metadata->>'rating' IS NOT NULL THEN
      RAISE EXCEPTION 'Books in "in_progress" category cannot have a rating';
    END IF;
  ELSIF NEW.categoryId = (SELECT id FROM Category WHERE name = 'read') THEN
    IF NEW.metadata->>'currentPage' IS NOT NULL THEN
      RAISE EXCEPTION 'Books in "read" category cannot have currentPage';
    END IF;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER validate_metadata_trigger
BEFORE INSERT OR UPDATE ON ShelfBook
FOR EACH ROW EXECUTE FUNCTION validate_metadata();

// User model
model User {
  id    Int     @id @default(autoincrement())
  name  String
  email String  @unique
  shelves Shelf[]
}

// Shelf model
model Shelf {
  id     Int     @id @default(autoincrement())
  name   String
  userId Int
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  books  ShelfBook[]
}

// Book model
model Book {
  id      Int     @id @default(autoincrement())
  title   String
  author  String
  isbn    String? @unique
  shelves ShelfBook[]
}

// ShelfBook join table with additional metadata
model ShelfBook {
  shelfId     Int
  bookId      Int
  category    Category
  currentPage Int?
  rating      Float?

  shelf       Shelf @relation(fields: [shelfId], references: [id], onDelete: Cascade)
  book        Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@id([shelfId, bookId, category]) // Composite primary key

  @@check(
    "(category = 'in_progress' AND currentPage IS NOT NULL AND rating IS NULL) OR \
     (category = 'read' AND rating IS NOT NULL AND currentPage IS NULL) OR \
     (category = 'to_be_read' AND currentPage IS NULL AND rating IS NULL)"
  )
}

// Enum for book categories
enum Category {
  in_progress
  read
  to_be_read
}