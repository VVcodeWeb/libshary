apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: libshary
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      nodeSelector:
        node-role.kubernetes.io/monitoring: 'true'
      tolerations:
        - key: 'node-role.kubernetes.io/control-plane'
          operator: 'Exists'
          effect: 'NoSchedule'
      containers:
        - name: grafana
          image: grafana/grafana
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-credentials
                  key: GF_SECURITY_ADMIN_USER
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-credentials
                  key: GF_SECURITY_ADMIN_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: libshary
spec:
  selector:
    app: grafana
  ports:
    - port: 3005
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: libshary
spec:
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      tolerations:
        - key: 'node-role.kubernetes.io/control-plane'
          operator: 'Exists'
          effect: 'NoSchedule'
      nodeSelector:
        node-role.kubernetes.io/monitoring: 'true'
      containers:
        - name: prometheus
          imagePullPolicy: IfNotPresent
          image: prom/prometheus
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: libshary
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
